{"version":3,"file":"sites.js","mappings":"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","sources":["webpack:///./sites.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.SitesAdmin = Garnish.Base.extend({\n    $groups: null,\n    $selectedGroup: null,\n\n    init: function () {\n      this.$groups = $('#groups');\n      this.$selectedGroup = this.$groups.find('a.sel:first');\n      this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n      var $groupSettingsBtn = $('#groupsettingsbtn');\n\n      if ($groupSettingsBtn.length) {\n        var menuBtn = $groupSettingsBtn.data('menubtn');\n\n        menuBtn.settings.onOptionSelect = (elem) => {\n          var $elem = $(elem);\n\n          if ($elem.hasClass('disabled')) {\n            return;\n          }\n\n          switch ($elem.data('action')) {\n            case 'rename': {\n              this.renameSelectedGroup();\n              break;\n            }\n            case 'delete': {\n              this.deleteSelectedGroup();\n              break;\n            }\n          }\n        };\n      }\n    },\n\n    addNewGroup: function () {\n      this.promptForGroupName('')\n        .then((name) => {\n          if (!name) {\n            return;\n          }\n\n          let data = {\n            name: name,\n          };\n\n          Craft.postActionRequest(\n            'sites/save-group',\n            data,\n            (response, textStatus) => {\n              if (textStatus === 'success') {\n                if (response.success) {\n                  location.href = Craft.getUrl('settings/sites', {\n                    groupId: response.group.id,\n                  });\n                } else if (response.errors) {\n                  var errors = this.flattenErrors(response.errors);\n                  Craft.cp.displayError(\n                    Craft.t('app', 'Could not create the group:') +\n                      '\\n\\n' +\n                      errors.join('\\n')\n                  );\n                } else {\n                  Craft.cp.displayError();\n                }\n              }\n            }\n          );\n        })\n        .catch(() => {});\n    },\n\n    renameSelectedGroup: function () {\n      this.promptForGroupName(this.$selectedGroup.data('raw-name'))\n        .then((newName) => {\n          var data = {\n            id: this.$selectedGroup.data('id'),\n            name: newName,\n          };\n\n          Craft.postActionRequest(\n            'sites/save-group',\n            data,\n            (response, textStatus) => {\n              if (textStatus === 'success') {\n                if (response.success) {\n                  this.$selectedGroup.text(response.group.name);\n                  this.$selectedGroup.data('raw-name', newName);\n                  Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                } else if (response.errors) {\n                  var errors = this.flattenErrors(response.errors);\n                  Craft.cp.displayError(\n                    Craft.t('app', 'Could not rename the group:') +\n                      '\\n\\n' +\n                      errors.join('\\n')\n                  );\n                } else {\n                  Craft.cp.displayError();\n                }\n              }\n            }\n          );\n        })\n        .catch(() => {});\n    },\n\n    promptForGroupName: function (oldName) {\n      return new Promise((resolve, reject) => {\n        Craft.sendActionRequest('POST', 'sites/rename-group-field', {\n          data: {name: oldName},\n        }).then((response) => {\n          let $form = $('<form/>', {class: 'modal prompt'}).appendTo(\n            Garnish.$bod\n          );\n          let $body = $('<div/>', {class: 'body'})\n            .append(response.data.html)\n            .appendTo($form);\n          let $buttons = $('<div/>', {class: 'buttons right'}).appendTo($body);\n          let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n          }).appendTo($buttons);\n          let $saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n          }).appendTo($buttons);\n\n          Craft.appendFootHtml(response.data.js);\n\n          let success = false;\n          let modal = new Garnish.Modal($form, {\n            onShow: () => {\n              setTimeout(() => {\n                Craft.setFocusWithin($body);\n              }, 100);\n            },\n            onHide: () => {\n              if (!success) {\n                reject();\n              }\n            },\n          });\n\n          $form.on('submit', (ev) => {\n            ev.preventDefault();\n            let newName = $('.text', $body).val();\n            if (newName && newName !== oldName) {\n              resolve(newName);\n              success = true;\n            }\n            modal.hide();\n          });\n\n          $cancelBtn.on('click', () => {\n            modal.hide();\n          });\n        });\n      });\n    },\n\n    deleteSelectedGroup: function () {\n      if (\n        confirm(Craft.t('app', 'Are you sure you want to delete this group?'))\n      ) {\n        var data = {\n          id: this.$selectedGroup.data('id'),\n        };\n\n        Craft.postActionRequest(\n          'sites/delete-group',\n          data,\n          (response, textStatus) => {\n            if (textStatus === 'success') {\n              if (response.success) {\n                location.href = Craft.getUrl('settings/sites');\n              } else {\n                Craft.cp.displayError();\n              }\n            }\n          }\n        );\n      }\n    },\n\n    flattenErrors: function (responseErrors) {\n      var errors = [];\n\n      for (var attribute in responseErrors) {\n        if (!responseErrors.hasOwnProperty(attribute)) {\n          continue;\n        }\n\n        errors = errors.concat(responseErrors[attribute]);\n      }\n\n      return errors;\n    },\n  });\n\n  Craft.SiteAdminTable = Craft.AdminTable.extend({\n    confirmDeleteModal: null,\n\n    $rowToDelete: null,\n    $deleteActionRadios: null,\n    $deleteSubmitBtn: null,\n    $deleteSpinner: null,\n\n    _deleting: false,\n\n    confirmDeleteItem: function ($row) {\n      if (this.confirmDeleteModal) {\n        this.confirmDeleteModal.destroy();\n        delete this.confirmDeleteModal;\n      }\n\n      this._createConfirmDeleteModal($row);\n\n      // Auto-focus the first radio\n      if (!Garnish.isMobileBrowser(true)) {\n        setTimeout(() => {\n          this.$deleteActionRadios.first().trigger('focus');\n        }, 100);\n      }\n\n      return false;\n    },\n\n    validateDeleteInputs: function () {\n      var validates =\n        this.$deleteActionRadios.eq(0).prop('checked') ||\n        this.$deleteActionRadios.eq(1).prop('checked');\n\n      if (validates) {\n        this.$deleteSubmitBtn.removeClass('disabled');\n      } else {\n        this.$deleteSubmitBtn.addClass('disabled');\n      }\n\n      return validates;\n    },\n\n    submitDeleteLocale: function (ev) {\n      ev.preventDefault();\n\n      if (this._deleting || !this.validateDeleteInputs()) {\n        return;\n      }\n\n      this.$deleteSubmitBtn.addClass('active');\n      this.$deleteSpinner.removeClass('hidden');\n      this.disable();\n      this._deleting = true;\n\n      var data = {\n        id: this.getItemId(this.$rowToDelete),\n      };\n\n      // Are we transferring content?\n      if (this.$deleteActionRadios.eq(0).prop('checked')) {\n        data.transferContentTo = this.$transferSelect.val();\n      }\n\n      Craft.postActionRequest(\n        this.settings.deleteAction,\n        data,\n        (response, textStatus) => {\n          if (textStatus === 'success') {\n            this._deleting = false;\n            this.enable();\n            this.confirmDeleteModal.hide();\n            this.handleDeleteItemResponse(response, this.$rowToDelete);\n          }\n        }\n      );\n    },\n\n    _createConfirmDeleteModal: function ($row) {\n      this.$rowToDelete = $row;\n\n      let id = this.getItemId($row);\n      let name = this.getItemName($row);\n\n      let $form = $(\n        '<form id=\"confirmdeletemodal\" class=\"modal fitted\" method=\"post\" accept-charset=\"UTF-8\">' +\n          Craft.getCsrfInput() +\n          '<input type=\"hidden\" name=\"action\" value=\"localization/deleteLocale\"/>' +\n          '<input type=\"hidden\" name=\"id\" value=\"' +\n          id +\n          '\"/>' +\n          '</form>'\n      ).appendTo(Garnish.$bod);\n      let $body = $(\n        '<div class=\"body\">' +\n          '<p>' +\n          Craft.t(\n            'app',\n            'What do you want to do with any content that is only available in {language}?',\n            {language: name}\n          ) +\n          '</p>' +\n          '<div class=\"options\">' +\n          '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' +\n          Craft.t('app', 'Transfer it to:') +\n          '</label> ' +\n          '<div id=\"transferselect\" class=\"select\">' +\n          '<select/>' +\n          '</div>' +\n          '</div>' +\n          '<div>' +\n          '<label><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' +\n          Craft.t('app', 'Delete it') +\n          '</label>' +\n          '</div>' +\n          '</div>'\n      ).appendTo($form);\n      let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n      let $cancelBtn = $('<button/>', {\n        type: 'button',\n        class: 'btn',\n        text: Craft.t('app', 'Cancel'),\n      }).appendTo($buttons);\n\n      this.$deleteActionRadios = $body.find('input[type=radio]');\n      this.$transferSelect = $('#transferselect').find('> select');\n      this.$deleteSubmitBtn = $('<button/>', {\n        type: 'submit',\n        class: 'btn submit disabled',\n        text: Craft.t('app', 'Delete {site}', {site: name}),\n      }).appendTo($buttons);\n      this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo(\n        $buttons\n      );\n\n      for (var i = 0; i < Craft.sites.length; i++) {\n        if (Craft.sites[i].id != id) {\n          this.$transferSelect.append(\n            '<option value=\"' +\n              Craft.sites[i].id +\n              '\">' +\n              Craft.escapeHtml(Craft.sites[i].name) +\n              '</option>'\n          );\n        }\n      }\n\n      this.confirmDeleteModal = new Garnish.Modal($form);\n\n      this.addListener($cancelBtn, 'click', function () {\n        this.confirmDeleteModal.hide();\n      });\n\n      this.addListener(\n        this.$deleteActionRadios,\n        'change',\n        'validateDeleteInputs'\n      );\n      this.addListener($form, 'submit', 'submitDeleteLocale');\n    },\n  });\n})(jQuery);\n"],"names":["$","jQuery","Craft","SitesAdmin","Garnish","Base","extend","$groups","$selectedGroup","init","this","find","addListener","$groupSettingsBtn","length","data","settings","onOptionSelect","elem","$elem","hasClass","renameSelectedGroup","deleteSelectedGroup","addNewGroup","promptForGroupName","then","name","postActionRequest","response","textStatus","success","location","href","getUrl","groupId","group","id","errors","flattenErrors","cp","displayError","t","join","newName","text","displayNotice","oldName","Promise","resolve","reject","sendActionRequest","$form","class","appendTo","$bod","$body","append","html","$buttons","$cancelBtn","type","appendFootHtml","js","modal","Modal","onShow","setTimeout","setFocusWithin","onHide","on","ev","preventDefault","val","hide","confirm","responseErrors","attribute","hasOwnProperty","concat","SiteAdminTable","AdminTable","confirmDeleteModal","$rowToDelete","$deleteActionRadios","$deleteSubmitBtn","$deleteSpinner","_deleting","confirmDeleteItem","$row","destroy","_createConfirmDeleteModal","isMobileBrowser","first","trigger","validateDeleteInputs","validates","eq","prop","removeClass","addClass","submitDeleteLocale","disable","getItemId","transferContentTo","$transferSelect","deleteAction","enable","handleDeleteItemResponse","getItemName","getCsrfInput","language","site","i","sites","escapeHtml"],"sourceRoot":""}